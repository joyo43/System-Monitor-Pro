name: Build and Release

# Controls when the workflow will run
on:
  push:
    tags:
      - 'v*' # Trigger on version tags like v0.1.0, v1.2.3 etc.
  workflow_dispatch: # Allow manual trigger
    inputs:
      version:
        description: 'Manual Version Tag (e.g., v0.1.0)' # Ensure tag format consistency
        required: true
        default: 'v0.1.0' # Default including 'v'

# Permissions required by the jobs
permissions:
  contents: write # Needed for tauri-action to create releases

jobs:
  build:
    strategy:
      fail-fast: false # Ensure all platforms attempt to build even if one fails
      matrix:
        # Define the platforms to build on
        platform: [macos-latest, ubuntu-20.04, windows-latest]
        # Consider using more specific versions like ubuntu-22.04 if needed

    # Use the matrix platform for the runner OS
    runs-on: ${{ matrix.platform }}

    steps:
      # 1. Checkout the repository code
      - name: Checkout repository
        uses: actions/checkout@v4 # Use latest major version

      # 2. Install OS-specific dependencies (Only for Ubuntu in this common Tauri setup)
      - name: Install dependencies (Ubuntu)
        if: matrix.platform == 'ubuntu-20.04'
        # These are standard prerequisites for Tauri on Debian/Ubuntu based systems
        run: |
          sudo apt-get update
          # Add the universe repository if not already enabled
          sudo add-apt-repository universe
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.0-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            patchelf \
            pkg-config \
            libssl-dev \
            libdbus-1-dev
        # Removed some potentially redundant GTK deps, add back if specific crates need them
        # Note: libappindicator3-dev is deprecated, using libayatana-appindicator3-dev instead.

      # macOS dependencies: Rely on Xcode Command Line Tools & native WKWebView for Tauri v2
      # Windows dependencies: Rely on WebView2 Runtime (usually pre-installed) & MSVC Build Tools (installed by Rust)

      # 3. Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v4 # Use latest major version
        with:
          node-version: 18 # Specify your project's Node version
          cache: 'npm' # Enable caching for npm dependencies

      # 4. Install Rust toolchain
      - name: Install Rust stable toolchain
        uses: dtolnay/rust-toolchain@stable
        # You can add components if needed: components: clippy, rustfmt

      # 5. Install frontend dependencies
      - name: Install frontend dependencies
        # Use 'npm ci' for deterministic installs in CI environment
        run: npm ci

      # 6. Set PKG_CONFIG_PATH (Optional but helpful for some crates on Linux/macOS)
      - name: Set PKG_CONFIG_PATH (Ubuntu)
        if: matrix.platform == 'ubuntu-20.04'
        run: echo "PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/share/pkgconfig" >> $GITHUB_ENV

      - name: Set PKG_CONFIG_PATH (macOS)
        if: matrix.platform == 'macos-latest'
        # Point to common Homebrew paths if installed, adjust if needed
        run: echo "PKG_CONFIG_PATH=$(brew --prefix)/lib/pkgconfig:/usr/local/opt/libffi/lib/pkgconfig" >> $GITHUB_ENV

      # 7. Determine the release tag name consistently across platforms
      #    FIX: Added 'shell: bash' to ensure the script runs in Bash on all OSes
      - name: Determine release tag
        id: tag # Give the step an ID to reference its outputs
        shell: bash # <<< IMPORTANT FIX for Windows/Cross-platform compatibility
        run: |
          TAG_NAME=""
          # Check if triggered by a tag push
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            TAG_NAME="${GITHUB_REF#refs/tags/}"
            echo "Using tag from GITHUB_REF: $TAG_NAME"
          # Check if triggered manually and input provided
          elif [[ -n "${{ github.event.inputs.version }}" ]]; then
            TAG_NAME="${{ github.event.inputs.version }}"
            # Ensure 'v' prefix if missing from manual input
            if [[ ! $TAG_NAME == v* ]]; then
              TAG_NAME="v$TAG_NAME"
              echo "Added 'v' prefix to manual input tag."
            fi
            echo "Using tag from manual input: $TAG_NAME"
          else
            # Fallback if neither condition is met (should not happen with current triggers)
            echo "Error: Could not determine release tag."
            exit 1
          fi
          # Set the output for use in later steps
          echo "tag=${TAG_NAME}" >> $GITHUB_OUTPUT

      # 8. Build the Tauri application and create a GitHub Release
      - name: Build and Release with Tauri Action
        # RECOMMENDATION: Check tauri-apps/tauri-action repo for the latest version compatible with Tauri v2
        uses: tauri-apps/tauri-action@v0 # Using v0 for now, verify and update if needed (e.g., @v1)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Add any build-time environment variables your app needs here
          # Example: VITE_API_URL: ${{ secrets.API_URL }}
        with:
          # Use the tag determined in the previous step
          tagName: ${{ steps.tag.outputs.tag }} # Format example: v0.1.0
          releaseName: 'System Monitor Pro ${{ steps.tag.outputs.tag }} - Alpha' # Customize your app name and tag format
          releaseBody: 'See the release assets to download for your specific platform.'
          releaseDraft: true # Create a draft release first (recommended)
          prerelease: true # Mark as a production release (set to true for pre-releases)
          args: "--verbose" # Optional: Add verbose output for debugging
          # Optional: Specify the script to run if not default 'npm run tauri build'
          # tauriScript: 'npm run build:tauri'
          # Optional: Specify paths if your project structure is non-standard
          # distPath: "../dist-frontend"
          # iconPath: "./icons/app-icon.png"